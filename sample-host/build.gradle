apply plugin: 'com.android.application'

android {
    compileSdk rootProject.android.compileSdk
    defaultConfig {
        applicationId rootProject.android.applicationId
        minSdkVersion rootProject.android.minSdk
        targetSdkVersion rootProject.android.targetSdk
        versionCode rootProject.android.versionCode
        versionName rootProject.android.versionName

        ndk {
            // 指定所需的 ABI 列表
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.create("release")
            signingConfig.initWith(buildTypes.debug.signingConfig)
        }
    }
    sourceSets {
        //Tencent原有时assets目录文件从下面这些地方取
//        debug {
//            assets.srcDir('build/generated/assets/sample-manager/debug/')
//            assets.srcDir('build/generated/assets/plugin-zip/debug/')
//        }
//        release {
//            assets.srcDir('build/generated/assets/sample-manager/release/')
//            assets.srcDir('build/generated/assets/plugin-zip/release/')
//        }

        //正式自有工程，直接定义assets目录

        main.jniLibs.srcDirs = ['libs']
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }


}

dependencies {
    implementation 'commons-io:commons-io:2.5'//sample-host从assets中复制插件用的
    implementation 'org.slf4j:slf4j-api:1.7.25'

    implementation 'androidx.support.magic.core:common:1.0.2-SNAPSHOT'
    implementation 'androidx.support.magic.dynamic:dynamic-host:1.0.3-SNAPSHOT'
    implementation project(':sample-constant')
    implementation project(':sample-host-lib')
    implementation 'androidx.support.magic.core:activity-container:1.0.3-SNAPSHOT'
}

//def createCopyTask(projectName, buildType, name, apkName, inputFile, taskName) {
//    def outputFile = file("${getBuildDir()}/generated/assets/${name}/${buildType}/${apkName}")
//    outputFile.getParentFile().mkdirs()
//    return tasks.create("copy${buildType.capitalize()}${name.capitalize()}Task", Copy) {
//        group = 'build'
//        description = "复制${name}到assets中."
//        from(inputFile.getParent()) {
//            include(inputFile.name)
//            rename { outputFile.name }
//        }
//        into(outputFile.getParent())
//
//    }.dependsOn("${projectName}:${taskName}")
//}
//
//def generateAssets(generateAssetsTask, buildType) {
//
//    def moduleName = 'sample-manager'
//    def pluginManagerApkFile = file(
//            "${project(":sample-manager").getBuildDir()}" +
//                    "/outputs/apk/${buildType}/" +
//                    "${moduleName}-${buildType}.apk"
//    )
//    generateAssetsTask.dependsOn createCopyTask(
//            ':sample-manager',
//            buildType,
//            moduleName,
//            'pluginmanager.apk',
//            pluginManagerApkFile,
//            "assemble${buildType.capitalize()}"
//    )
//
//    def pluginZip = file("${getRootProject().getBuildDir()}/plugin-${buildType}.zip")
//    generateAssetsTask.dependsOn createCopyTask(
//            ':sample-app',
//            buildType,
//            'plugin-zip',
//            "plugin-${buildType}.zip",
//            pluginZip,
//            "package${buildType.capitalize()}Plugin"
//    )
//
//
//}
//
//tasks.whenTaskAdded { task ->
//    if (task.name == "generateDebugAssets") {
//        generateAssets(task, 'debug')
//    }
//    if (task.name == "generateReleaseAssets") {
//        generateAssets(task, 'release')
//    }
//}